import * as ts from 'typescript';
import * as Lint from 'tslint/lib/lint';

import {ErrorTolerantWalker} from './utils/ErrorTolerantWalker';
// use SyntaxKind.current() instead of ts.SyntaxKind to compare kinds // TODO: delete comment
import {SyntaxKind} from './utils/SyntaxKind';
// use (and contribute to) AstUtils for common AST functions // TODO: delete comment
import {AstUtils} from './utils/AstUtils';
// use Utils instead of Underscore functions // TODO: delete comment
import {Utils} from './utils/Utils';

const FAILURE_STRING: string = 'Some error message: '; // TODO: Define an error message

/**
 * Implementation of the %RULE_NAME% rule.
 */
export class Rule extends Lint.Rules.AbstractRule {
    public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {
        return this.applyWithWalker(new %WALKER_NAME%(sourceFile, this.getOptions()));
    }
}

class %WALKER_NAME% extends ErrorTolerantWalker {

    protected visitNode(node: ts.Node): void {
        console.log(ts.SyntaxKind[node.kind] + ' ' + node.getText());
        super.visitNode(node);
    }
}
